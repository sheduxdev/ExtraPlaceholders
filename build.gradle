plugins {
    id "java"
    id "java-library"
    id("com.gradleup.shadow") version "${shadowJarVersion}"
}

group = project.findProperty("group") ?: "network.soylu"
version = project.findProperty("version") ?: "v0.1"
description = project.findProperty("description") ?: "Custom PlaceholderAPI expansion"


dependencies {
    compileOnly "io.papermc.paper:paper-api:${project.findProperty("paperApiVersion")}"
    compileOnly "me.clip:placeholderapi:${project.findProperty("placeholderApiVersion")}"
    compileOnly "xyz.refinedev.practice:BoltAPI:${project.findProperty("boltApiVersion")}"
    compileOnly "xyz.refinedev.phoenix:pxAPI:${project.findProperty("phoenixApiVersion")}"
    compileOnly "org.projectlombok:lombok:${project.findProperty("lombokVersion")}"
    implementation("net.j4c0b3y.CommandAPI:bukkit:${project.findProperty("commandApiVersion")}")
    implementation("net.j4c0b3y:ConfigAPI-core:${project.findProperty("configApiVersion")}")
    annotationProcessor "org.projectlombok:lombok:${project.findProperty("lombokVersion")}"
}

def targetJavaVersion = project.findProperty("targetJavaVersion")?.toInteger() ?: 21

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    if (JavaVersion.current() < javaVersion) {
        toolchain {
            languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = project.findProperty("sourceEncoding") ?: "UTF-8"
    options.compilerArgs << "-parameters"
    options.fork = true

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [
            version: version,
            name: project.findProperty("projectName") ?: "SoyluPlaceholders",
            description: description,
            minecraftVersion: project.findProperty("minecraftVersion") ?: "1.21.4",
            apiVersion: project.findProperty("apiVersion") ?: "1.21"
    ]

    inputs.properties(props)
    filteringCharset(project.findProperty("sourceEncoding") ?: "UTF-8")

    filesMatching("plugin.yml") {
        expand(props)
    }
}

shadowJar {
    archiveBaseName.set(project.findProperty("projectName") ?: "SoyluPlaceholders")
    archiveClassifier.set("")
    archiveVersion.set(version.toString())

    manifest {
        attributes(
                "Implementation-Title": project.findProperty("projectName"),
                "Implementation-Version": version,
                "Built-By": System.getProperty("user.name"),
                "Built-JDK": System.getProperty("java.version"),
                "Created-By": "Gradle ${gradle.gradleVersion}"
        )
    }

    minimize()
}

build {
    dependsOn shadowJar
}

clean {
    delete project.findProperty("buildDir") ?: "build"
}